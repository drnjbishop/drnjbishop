knit_with_parameters("C:/Users/n_b110/Desktop/website/home/CV.Rmd", encoding = "UTF-8")
tinytex::install_tinytex()
install.packages("tinytex")
tinytex::tlmgr_install("tex-gyre")
tlmgr install epstopdf-pkg
install.packages("epstopdf")
install.packages("epstopdf-pkg")
install.packages("tinytex")
tinytex::install_tinytex()
## Load in Data
install.packages("candisc")
library(candisc)
?HSB
?candisc
data("HSB") # load data
d1 <- subset(HSB, select = c(prog, math, sci))
str(d1)
summary(d1)
d1$stem <- (d1$sci + d1$math)/2 #average score across math and science
summary(d1$stem)
hist(d1$stem, breaks = 20)
library(psych)
describeBy(d1$stem, group = d1$prog)
plot(d1$stem ~ d1$prog,
main = "STEM scores by School Program",
xlab = "School Program",
ylab = "Average STEM Scores",
col = "grey60")
levels(d1$prog)
d1$prog <- relevel(d1$prog, ref = "academic")
levels(d1$prog)
str(d1$prog)
library(car) #need this for omnibus test
Anova(m1, type="III") #**This is an omnibus test. What does that mean?
m1 <- lm(stem ~ prog, data=d1) #fit the model
m1
Anova(m1, type="III") #**This is an omnibus test. What does that mean?
summary(m1) #model results and adjusted r-square
TukeyHSD(aov(stem ~ prog, data=d1))
library(emmeans)
probe1 <- emmeans(m1, "prog")
probe1 #predicted group means of stem scores for each program
pairs(probe1)
hist(m1$residuals) #Normal? Mean of 0?
round(mean(m1$residuals),2) #yes
qqPlot(m1)
describe(m1$residuals)
names(summary(m1))
summary(m1)$coefficients
difAG <- summary(m1)$coefficients[2,1]# getting diff btw mean scores for Academic vs. General
difAG
difAV <- summary(m1)$coefficients[3,1]# getting diff btw mean scores for Academic vs. Vocational
difAV
sigma <- summary(m1)$sigma #getting residual variance (e.g.., sigma)
sigma
d1$progG <- relevel(d1$prog, ref="general") #making general the reference group
m2 <- lm(stem ~ progG, data=d1)
summary(m2) #the comparison we need is in row 3, column 1 [3,1]
difGV <- summary(m2)$coefficients[3,1] # getting diff btw mean score for General & Vocational
difGV
cohend_AG <- abs(difAG/sigma)
cohend_AG
cohend_AV <- abs(difAV/sigma)
cohend_AV
cohend_GV <- abs(difGV/sigma)
cohend_GV
library(car)
leveneTest(stem ~ prog, data=d1)
library(rstatix)
View(d1)
library(tidyverse)
d1 %>% dplyr::seelct(stem, prog) %>% games_howell_test(stem ~ prog)
d1 %>% dplyr::select(stem, prog) %>% games_howell_test(stem ~ prog)
d1 %>% dplyr::select(stem, prog) %>% tukey_hsd(stem ~ prog)
d1 %>% dplyr::select(stem, prog) %>% cohens_d(stem ~ prog, var.equal = TRUE)
cohend_AG <- abs(difAG/sigma)
cohend_AG #(.71) is effect size for comparison between academic and general students
# This is a large effect
cohend_AV <- abs(difAV/sigma)
cohend_AV #(1.08) is effect size for comparison between academic and vocational students
# Large effect
cohend_GV <- abs(difGV/sigma)
cohend_GV
d1 %>% dplyr::select(stem, prog) %>% anova_test(stem ~ prog)
Anova(m1, type="III")
d1 %>% anova_test(stem ~ prog)
summary(m1)
d1 %>% dplyr::select(stem, prog) %>% levene_test(stem ~ prog, center = "mean")
leveneTest(stem ~ prog, data=d1)
leveneTest(stem ~ prog, center = "mean", data=d1)
d1 %>% levene_test(stem ~ prog, center = "mean")
emm_object <- emmeans(m2, specs = "prog") # specs = the groups
m2 <- lm(stem ~ prog, data=d1) #fit the model
Anova(m2, type="III")
emm_object <- emmeans(m2, specs = "prog") # specs = the groups
emm_object #group means of stem scores for each program
# also take note of the df, we will need this to calculate our effect size
## Control our Type I error rate using Tukey's HSD
tukey <- pairs(emm_object) #default is Tukey
tukey
confint(tukey)
## Control our Type I error rate using Bonferroni (much more conservative)
bonf <- pairs(emm_object, adjust = "bonferroni")
bonf
confint(bonf)
d1 %>% dplyr::select(stem, prog) %>% tukey_hsd(stem ~ prog)
options(scipen = 999)
d1 %>% dplyr::select(stem, prog) %>% tukey_hsd(stem ~ prog)
d1 %>% anova_test(stem ~ prog)
d1 %>% dplyr::select(stem, prog) %>% tukey_hsd(stem ~ prog)
tinytex::install_tinytex()
install.packages("tinytex")
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages(c("checkmate", "cli", "digest", "dplyr", "fansi", "fastmap", "htmltools", "lubridate", "magick", "matrixStats", "plyr", "pryr", "purrr", "Rcpp", "rlang", "stringi", "tibble", "tidyr", "utf8", "vctrs", "xfun", "yaml"))
install.packages(c("checkmate", "cli", "digest", "dplyr", "fansi", "fastmap", "htmltools", "lubridate", "magick", "matrixStats", "plyr", "pryr", "purrr", "Rcpp", "rlang", "stringi", "tibble", "tidyr", "utf8", "vctrs", "xfun", "yaml"))
install.packages(c("checkmate", "cli", "digest", "dplyr", "fansi", "fastmap", "htmltools", "lubridate", "magick", "matrixStats", "plyr", "pryr", "purrr", "Rcpp", "rlang", "stringi", "tibble", "tidyr", "utf8", "vctrs", "xfun", "yaml"))
install.packages(c("checkmate", "cli", "digest", "dplyr", "fansi", "fastmap", "htmltools", "lubridate", "magick", "matrixStats", "plyr", "pryr", "purrr", "Rcpp", "rlang", "stringi", "tibble", "tidyr", "utf8", "vctrs", "xfun", "yaml"))
tinytex::install_tinytex()
tinytex::install_tinytex()
install.packages("knitr")
library(knitr)
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("knitr")
install.packages("knitr")
library(knitr)
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("knitr")
library(knitr)
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("tinytex")
install.packages("knitr")
install.packages("fastmap")
install.packages("fastmap")
tinytex::tlmgr_update()
options(tinytex.verbose = TRUE)
tinytex::reinstall_tinytex()
tinytex::reinstall_tinytex()
